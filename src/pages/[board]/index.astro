---
import Layout from '../../layouts/Layout.astro';
import { Kysely } from 'kysely';
import { D1Dialect } from 'kysely-d1';
import type { DB } from '../../../prisma/generated/types';

import { SignIn, SignOut } from 'auth-astro/components'



const { board } = Astro.params;
const board_name = board ?? "";
const runtime = Astro.locals.runtime;
const raw = runtime.env?.D1;
const db = new Kysely<DB>({ dialect: new D1Dialect({ database:  raw}) });
const boards = await db.selectFrom("Board").selectAll().execute();
const boardId = boards.find(b => b.id === 1)?.id;
const boardExists = boardId !== undefined;
//const boardExists = boards.some(b => b.name === board_name);

const threads = await (async function(){ if (!boardExists) { return [];}
else {
  return await db.selectFrom("Thread").where('boardId', '=', boardId).selectAll().orderBy('Thread.id desc').limit(5).execute();
  //return [1,23];
}

})();


console.log(boards, "before", board,  "after", board_name)
---
<Layout title="Welcome to Astro.">
    <ul class="flex space-x-2">
        <li>all boards:</li>
        {boards.map((b) => <li><a href={`/${b.name}/`}>/{b.name}/</a></li>)}
    </ul>
    <h1 class="text-4xl">/{board}/</h1>

    { boardExists ? <p>Has board</p> : <p>board doesn't exist</p>}

<h1>Threads {threads.length}</h1>

<ul>
  {threads.map((t)=> <li><a href={`/${board_name}/thread/${t.id}`}>{t.title}</a></li> )}
</ul>

<h1>Sign</h1>
    <SignIn provider="github" />
	<SignOut />

<h1>New Thread</h1>

<Layout title="New Thread">
    <form action="/api/newthread" method="post">
        <input type="number" name="boardId" value={boardId} hidden readonly />

        <label>
          Title
          <input type="text" name="title" />
        </label>
    
        <label>
          Content
          <input type="text" name="content" />
        </label>
    
        <button>Post</button>
      </form>
</Layout>

</Layout>